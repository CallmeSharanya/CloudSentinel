import pandas as pd
import json
from PHEops import *
from stego_encrypt import encode_json_rows_into_images
from stego_decrypt import decrypt_stego_image

def generate_keys_to_json():
    # generate keys
    public_key, private_key = generate_keys()
    # Save public key to a JSON file
    with open("public_key.json", "w") as pub_file:
        json.dump({"n": public_key.n}, pub_file)
    # Save the private key (store securely, do not share)
    with open("private_key.json", "w") as priv_file:
        json.dump({"p": private_key.p, "q": private_key.q}, priv_file)

    public_key_data = {"n": str(public_key.n)}
    with open("public_key.json", "w") as pub_file:
        json.dump(public_key_data, pub_file)

    # Save private key to a JSON file
    private_key_data = {
        "public_key": {"n": str(private_key.public_key.n)},
        "p": str(private_key.p),
        "q": str(private_key.q),
    }
    with open("private_key.json", "w") as priv_file:
        json.dump(private_key_data, priv_file)
    
    return public_key, private_key

def load_keys():
    # Load the public key
    with open("public_key.json", "r") as pub_file:
        pub_data = json.load(pub_file)
        public_key = paillier.PaillierPublicKey(n=int(pub_data["n"]))

    # Load the private key
    with open("private_key.json", "r") as priv_file:
        priv_data = json.load(priv_file)
        private_key = paillier.PaillierPrivateKey(
            public_key=paillier.PaillierPublicKey(n=int(priv_data["public_key"]["n"])),
            p=int(priv_data["p"]),
            q=int(priv_data["q"]),
        )

    return public_key, private_key

def encrypt_file(public_key, filename): 
    # Load the public key
    # with open("public_key.json", "r") as pub_file:
    #     pub_data = json.load(pub_file)
    #     public_key = paillier.PaillierPublicKey(n=int(pub_data["n"]))

    df = pd.read_excel(filename)

    df["Account ID_encr"] = df["Account ID"].apply(lambda acid: encrypt_string(public_key, acid))
    df["Phone Number_encr"] = df["Phone Number"].apply(lambda phno: encrypt_value(public_key, phno))
    df["Balance_encr"] = df["Balance"].apply(lambda balance: encrypt_value(public_key, balance))
    
    # Drop the plaintext balance column for security
    df = df.drop(columns=["Balance"])
    df = df.drop(columns=["Account ID"])
    df = df.drop(columns=["Phone Number"])

    # Save the encrypted DataFrame to a JSON file
    df.to_json("encrypted_BankLedger.json", orient="records")

    return json.loads(df.to_json(orient="records"))

# decrypt the HE file generated by unstego operation
def decrypt_HE(public_key, private_key, output_json): 
    encrypted_result = []

    # Deserialize encrypted result and prepare for decryption
    for field in ["Account ID_encr", "Phone Number_encr", "Balance_encr"]:
        encrypted_number = paillier.EncryptedNumber(
            public_key,
            int(output_json[field]),  # The "big number" from JSON is treated as ciphertext
            0  # Default exponent if not serialized explicitly
        )
        encrypted_result.append(encrypted_number)

    print("Encrypted result as a list:", encrypted_result)

    # Decrypt the result
    decrypted_result = {
        "Account ID": decrypt_string(private_key, {
            "ciphertext": encrypted_result[0].ciphertext(),  # Prepare for decrypt_string format
            "exponent": encrypted_result[0].exponent  # Exponent value from EncryptedNumber
        }),
        "Phone Number": decrypt_value(private_key, {
            "ciphertext": encrypted_result[1].ciphertext(),  # Convert ciphertext for decrypt_value
            "exponent": encrypted_result[1].exponent  # Exponent value for decrypt_value
        }),
        "Balance": decrypt_value(private_key, {
            "ciphertext": encrypted_result[2].ciphertext(),  # Convert ciphertext for decrypt_value
            "exponent": encrypted_result[2].exponent  # Exponent value for decrypt_value
        })
    }

    print("Decrypted result:", decrypted_result)
    return decrypted_result


# ******---VERY VERY VERY IMPORTANT---******
# use decrypt_stego_image when you need to only get HE json file --> good for updation and addition/subtraction
# use decrypt_HE when you need to fetch values to display to user

def encrypt_HE_and_stego(public_key, excel_file, images_directory, encoded_imgs_directory):
    encrypted_json_data = encrypt_file(public_key, excel_file)
    print("Stego encrypted json data.")
    encode_json_rows_into_images(encrypted_json_data, images_directory, encoded_imgs_directory)




if __name__ == "__main__":
    excel_file = "BankLedger.xlsx"
    encrypted_json = "encrypted_BankLedger.json"
    encrypted_json_data = ""
    images_directory = r"images"
    encoded_imgs_directory = r"encoded_img"

    encoded_user_img = r"encoded_img\image_ratna.png"
    
    public_key, private_key = generate_keys_to_json()
    print("Keys generated and saved as 'public_key.json' and 'private_key.json'.")
    print("Load keys: ", load_keys())
    encrypt_HE_and_stego(public_key, excel_file, images_directory, encoded_imgs_directory)



    print("Decode stego image")
    output_json = decrypt_stego_image(encoded_user_img)
    print("Decrypt json")
    decrypt_HE(public_key, private_key, output_json)

